package com.zhaoxi.Open_source_Android.db.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zhaoxi.Open_source_Android.common.bean.SimpleAssetBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SIMPLE_ASSET_BEAN".
*/
public class SimpleAssetBeanDao extends AbstractDao<SimpleAssetBean, Long> {

    public static final String TABLENAME = "SIMPLE_ASSET_BEAN";

    /**
     * Properties of entity SimpleAssetBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property From = new Property(1, String.class, "from", false, "FROM");
        public final static Property TokenSymbol = new Property(2, String.class, "tokenSymbol", false, "TOKEN_SYMBOL");
        public final static Property ContractType = new Property(3, String.class, "contractType", false, "CONTRACT_TYPE");
        public final static Property BalanceOfToken = new Property(4, String.class, "balanceOfToken", false, "BALANCE_OF_TOKEN");
    }


    public SimpleAssetBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SimpleAssetBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SIMPLE_ASSET_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FROM\" TEXT," + // 1: from
                "\"TOKEN_SYMBOL\" TEXT," + // 2: tokenSymbol
                "\"CONTRACT_TYPE\" TEXT," + // 3: contractType
                "\"BALANCE_OF_TOKEN\" TEXT);"); // 4: balanceOfToken
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SIMPLE_ASSET_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SimpleAssetBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(2, from);
        }
 
        String tokenSymbol = entity.getTokenSymbol();
        if (tokenSymbol != null) {
            stmt.bindString(3, tokenSymbol);
        }
 
        String contractType = entity.getContractType();
        if (contractType != null) {
            stmt.bindString(4, contractType);
        }
 
        String balanceOfToken = entity.getBalanceOfToken();
        if (balanceOfToken != null) {
            stmt.bindString(5, balanceOfToken);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SimpleAssetBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(2, from);
        }
 
        String tokenSymbol = entity.getTokenSymbol();
        if (tokenSymbol != null) {
            stmt.bindString(3, tokenSymbol);
        }
 
        String contractType = entity.getContractType();
        if (contractType != null) {
            stmt.bindString(4, contractType);
        }
 
        String balanceOfToken = entity.getBalanceOfToken();
        if (balanceOfToken != null) {
            stmt.bindString(5, balanceOfToken);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SimpleAssetBean readEntity(Cursor cursor, int offset) {
        SimpleAssetBean entity = new SimpleAssetBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // from
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tokenSymbol
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // contractType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // balanceOfToken
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SimpleAssetBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFrom(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTokenSymbol(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContractType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBalanceOfToken(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SimpleAssetBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SimpleAssetBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SimpleAssetBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
